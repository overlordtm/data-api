name: Build container

on:
  push:
    branches: [master]
    tags: [v*]
  pull_request:
    types: [synchronize, reopened, labeled, unlabeled, closed]
    branches: [master]

jobs:
  build:
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout repo
        uses: actions/checkout@v2

      - name: Get current tag
        if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
        id: tag
        uses: dawidd6/action-get-tag@v1

      - name: Set environment (tagged build)
        if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
        run: |
          echo "IMAGE_TAG=${{steps.tag.outputs.tag}}" >> $GITHUB_ENV
          echo "RELEASE_NAME=api-prod" >> $GITHUB_ENV
          echo "INGRESS_RULE=Host(\`api.sledilnik.org\`)" >> $GITHUB_ENV
          echo "DEPLOY_ENV=production" >> $GITHUB_ENV
          echo "DEPLOY_URL=https://api.sledilnik.org" >> $GITHUB_ENV

      - name: Set environment (master build)
        if: github.event_name == 'push' && startsWith(github.ref, 'refs/heads/')
        run: |
          echo "IMAGE_TAG=latest" >> $GITHUB_ENV
          echo "RELEASE_NAME=api-stage" >> $GITHUB_ENV
          echo "INGRESS_RULE=Host(\`api-stage.sledilnik.org\`)" >> $GITHUB_ENV
          echo "DEPLOY_ENV=staging" >> $GITHUB_ENV
          echo "DEPLOY_URL=https://api-stage.sledilnik.org" >> $GITHUB_ENV

      - name: Set environment (PR build)
        if: github.event_name == 'pull_request'
        run: |
          echo "IMAGE_TAG=pr-${{ github.event.pull_request.number }}" >> $GITHUB_ENV
          echo "RELEASE_NAME=api-pr-${{ github.event.pull_request.number }}" >> $GITHUB_ENV
          echo "INGRESS_RULE=Host(\`pr-${{ github.event.pull_request.number }}.api.sledilnik.org\`)" >> $GITHUB_ENV
          echo "DEPLOY_ENV=pr-${{ github.event.pull_request.number }}" >> $GITHUB_ENV
          echo "DEPLOY_URL=https://pr-${{ github.event.pull_request.number }}.api.sledilnik.org" >> $GITHUB_ENV

      # - name: Set up Docker Buildx
      #   uses: docker/setup-buildx-action@v1

      # - name: Login to DockerHub
      #   uses: docker/login-action@v1 
      #   with:
      #     registry: ghcr.io
      #     username: ${{ github.repository_owner }}
      #     password: ${{ secrets.GHCR_TOKEN }}
      
      # - name: Build and push
      #   id: docker_build
      #   uses: docker/build-push-action@v2
      #   with:
      #     context: ./sources/SloCovidServer/
      #     file: ./sources/SloCovidServer/Dockerfile
      #     push: true
      #     tags: ghcr.io/${{ github.repository_owner }}/data-api:${{ env.IMAGE_TAG}}

      - name: Deploy
        if: github.event_name != 'pull_request' || (github.event.action != 'closed' && contains(github.event.pull_request.labels.*.name, 'deploy-preview'))
        uses: actions/github-script@v3
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |

            console.log(JSON.stringify(context.payload))

            const releaseName = process.env['RELEASE_NAME']
            const ingressRule = process.env['INGRESS_RULE']
            const imageTag = process.env['IMAGE_TAG']
            const environment = process.env['DEPLOY_ENV']
            const deploymentUrl = process.env['DEPLOY_URL']

            const ref = context.payload.ref || context.pull_request.head.ref

            const payload = {
                namespace: 'default',
                chartName: 'data-api',
                chartVersion: '0.1.1',
                releaseName: releaseName,
                deploymentUrl,
                chartValues: {
                  'image.tag': imageTag,
                  'ingressroute.rule': ingressRule
                }
              }

            github.repos.createDeployment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref,
              required_contexts: [],
              environment,
              payload,
            });